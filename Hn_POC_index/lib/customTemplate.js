(function (win, ysp) {

  var utils = ysp.utils;
  ysp.customTemplateHelper = {};
  utils.extend(ysp.customTemplateHelper, {
    VisitCendar: function () {
      var selfTemplate = "// VisitCendar customTemplate \n// customTemplate.js \u662F\u53EF\u590D\u7528\u7684 React \u6A21\u677F\u7EC4\u4EF6\n// \u5728\u81EA\u5B9A\u4E49\u7EC4\u4EF6\u6A21\u677F\u4E2D\u8FDB\u884C\u8C03\u7528\n// \u8C03\u7528\u65B9\u5F0F\uFF1A\u5982\u7EC4\u4EF6\u540D\u79F0\u4E3ATest\uFF0Cvar Test = require('ysp-custom-components').Test;\nimport {\n  Component\n} from 'react';\n/*\n---------------------------\n\u5982\u4F55\u5F15\u7528\uFF1Aimport {VisitCalendar} from 'ysp-custom-components';\n---------------------------\n*/\nexport default class extends Component {\n  constructor() {\n    // the options\n    super();\n    this.state = {checkedDay:null};\n    this.defaults = {\n      /*\n      you can also pass:\n      month : initialize calendar with this month (1-12). Default is today.\n      year : initialize calendar with this year. Default is today.\n      caldata : initial data/content for the calendar.\n      caldata format:\n      {\n        'MM-DD-YYYY' : 'HTML Content',\n        'MM-DD-YYYY' : 'HTML Content',\n        'MM-DD-YYYY' : 'HTML Content'\n        ...\n      }\n      */\n      weeks: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      weekabbrs: ['\u65E5', '\u4E00', '\u4E8C', '\u4E09', '\u56DB', '\u4E94', '\u516D'],\n      months: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n      monthabbrs: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n      // choose between values in options.weeks or options.weekabbrs\n      displayWeekAbbr: false,\n      // choose between values in options.months or options.monthabbrs\n      displayMonthAbbr: false,\n      // left most day in the calendar\n      // 0 - Sunday, 1 - Monday, ... , 6 - Saturday\n      startIn: 1\n    };\n  }\n  fakeArray(length){\n    if(typeof length !== 'number'){\n       console.error('fakeArray`s length type is not integer,this type is ' + typeof length);\n       return;\n    }\n    let array = new Array();\n    for(let i = 0;i<length;i++){\n      array.push(i);\n    }\n    return array;\n  }\n  render() {\n    // options\n    let _this = this;\n    this.options = Object.assign({}, this.defaults, this.props.options);\n    this.options.displayWeekAbbr = true;\n    this.today = new Date();\n    let cmonth;\n    let cyear;\n    let cdate;\n    if(this.props.title && this.props.title.match(/\\d+/)){\n       let title = this.props.title;\n       cmonth = parseInt(title.match(/\\D\\d+\\D/)[0].match(/\\d+/)[0]) - 1; \n       cyear = parseInt(title.match(/^\\d+\\D/)[0].match(/\\d+/)[0]);\n       // cdate = parseInt(title.match(/\\d+\\D$/m)[0].match(/\\d+/)[0]);\n    }\n    this.month = cmonth !== undefined ? cmonth : ((isNaN(this.options.month) || this.options.month == null) ? this.today.getMonth() : this.options.month - 1);\n    this.year = cyear !== undefined ? cyear : (isNaN(this.options.year) || this.options.year == null) ? this.today.getFullYear() : this.options.year;\n    // this.date = cdate !== undefined ? cdate : (isNaN(this.options.date) || this.options.date == null) ? this.today.getDate() : this.options.date;\n    this.caldata = this.props.data;\n    return (\n      <div>\n        <div className=\"c-head\">\n            <span onClick={()=>{\n              _this.props.preMonth();\n              _this.gotoPreviousMonth();\n            }}>\n               <i className=\"ysp-visitcalendar-pre\"></i>\n            </span>\n            <span className=\"time\">{this.props.title}</span>\n            <span onClick={()=>{\n              _this.props.nextMonth();\n              _this.gotoNextMonth();\n            }}>\n               <i className=\"ysp-visitcalendar-next\"></i>\n            </span>\n        </div>\n        {this.generateTemplate()}\n      </div>\n    );\n  }\n  // Calendar logic based on http://jszen.blogspot.pt/2007/03/how-to-build-simple-calendar-with.html\n  generateTemplate(callback) {\n    var head = this.getHead(),\n      body = this.getBody(),\n      rowClass;\n    switch (this.rowTotal) {\n      case 4:\n        rowClass = 'fc-four-rows';\n        break;\n      case 5:\n        rowClass = 'fc-five-rows';\n        break;\n      case 6:\n        rowClass = 'fc-six-rows';\n        break;\n    }\n    return (\n      <div className={\"fc-calendar \" + rowClass}>\n         {head}\n         {body}\n       </div>\n    );\n  }\n  getHead() {\n    return (\n      <div className=\"fc-head\">\n         {\n           this.fakeArray(7).map((item,index)=>{\n             let i = parseInt(index);\n             let pos = i + this.options.startIn,\n                 j = pos > 6 ? pos - 6 - 1 : pos;\n             return(\n                <div>{this.options.displayWeekAbbr ? this.options.weekabbrs[j] : this.options.weeks[j]}</div>\n             );\n        })}\n       </div>\n    );\n  }\n  getBody() {\n    let d = new Date(this.year, this.month + 1, 0),\n      // number of days in the month\n      monthLength = d.getDate(),\n      firstDay = new Date(this.year, this.month, 1);\n    // day of the week\n    this.startingDay = firstDay.getDay();\n    let day = 1;\n    let _this = this;\n    let breakIndex;\n    return (  \n        <div className=\"fc-body\">\n           {_this.fakeArray(7).map((item,index)=>{\n               let i = parseInt(index);\n               if (day > monthLength && !_this.rowTotal) {\n                  _this.rowTotal = i + 1;\n                  breakIndex = index;\n                  return;\n                }\n               if (day > monthLength){\n                 return;\n               }\n               return (\n                   <div className=\"fc-row\">\n                      {_this.fakeArray(7).map((item,subIndex)=>{\n                         let j = parseInt(subIndex);\n                         let pos = _this.startingDay - _this.options.startIn,\n                            p = pos < 0 ? 6 + pos + 1 : pos,\n                            inner = '',\n                            today = _this.month === _this.today.getMonth() && _this.year === _this.today.getFullYear() && day === _this.today.getDate(),\n                            content = ''; \n                         if (day <= monthLength && (i > 0 || j >= p)) {\n                            // this day is:\n                            let strdate = (_this.month + 1 < 10 ? '0' + (_this.month + 1) : _this.month + 1) + '-' + (day < 10 ? '0' + day : day) + '-' + _this.year,\n                              dayData = _this.caldata[strdate],\n                              currentDay = (_this.year + '-' + (_this.month + 1 < 10 ? '0' + (_this.month + 1) : _this.month + 1)) + '-' + (day < 10 ? '0' + day : day);\n                            const isCurrentDay = (item) => new Date(item.x_PLAN_DATE).getTime() == new Date(currentDay).getTime();\n                            let filterItems = _this.caldata.filter(isCurrentDay);\n                            let realTime = _this.getRealTime();\n                            console.info(realTime);\n                            inner = \n                                     <span className=\"calendar-cell\" href=\"#\"  className={new Date(realTime).getTime() > new Date(currentDay).getTime() ? 'z-done': filterItems.length > 0 && filterItems[0].x_STATUS_CD == '\u5DF2\u63D0\u4EA4'?'z-done-new':'z-yet'}>\n                                          <span className=\"calendar-real-day\">{day}</span>\n                                          <span>\n                                              {filterItems.length > 0 ? filterItems[0].x_STATUS_CD : \"\"}\n                                          </span>\n                                     </span>;\n                            ++day;\n                          } else {\n                            today = false;\n                          }\n                          let cellClasses = today ? 'fc-today ' : '';\n                          if (content !== '') {\n                            cellClasses += 'fc-content';\n                          }\n                          return (\n                            <div data-day-value={day} \n                              data-index={subIndex} \n                              className={cellClasses + (_this.state.checkedDay == day ? 'calendar-day-checked':'')}  \n\n                              onClick={(e)=>{      \n                                  let currentTarget = e.currentTarget;\n                                  let realDayEl = currentTarget.querySelector('span.calendar-real-day');\n                                  let realDay = realDayEl && realDayEl.textContent;\n                                  let idx = parseInt(currentTarget.dataset.index);\n                                  _this.setState({checkedDay:currentTarget.dataset.dayValue});\n                                  let dateProp = {\n                                    day: day,\n                                    month: _this.month + 1,\n                                    monthname: _this.options.displayMonthAbbr ? _this.options.monthabbrs[_this.month] : _this.options.months[_this.month],\n                                    year: _this.year,\n                                    weekday: idx + _this.options.startIn,\n                                    weekdayname: _this.options.weeks[idx + _this.options.startIn],\n                                    realDay:realDay\n                                  };\n                                  _this.props.onDayBack(dateProp);\n\n                              }}>\n                               {inner}\n                            </div>\n                          );\n                      })}\n                   </div>\n               );\n           })}   \n        </div>\n    );\n  }\n  _isValidDate(date) {\n    date = date.replace(/-/gi, '');\n    var month = parseInt(date.substring(0, 2), 10),\n      day = parseInt(date.substring(2, 4), 10),\n      year = parseInt(date.substring(4, 8), 10);\n    if ((month < 1) || (month > 12)) {\n      return false;\n    } else if ((day < 1) || (day > 31)) {\n      return false;\n    } else if (((month == 4) || (month == 6) || (month == 9) || (month == 11)) && (day > 30)) {\n      return false;\n    } else if ((month == 2) && (((year % 400) == 0) || ((year % 4) == 0)) && ((year % 100) != 0) && (day > 29)) {\n      return false;\n    } else if ((month == 2) && ((year % 100) == 0) && (day > 29)) {\n      return false;\n    }\n    return {\n      day: day,\n      month: month,\n      year: year\n    };\n  }\n  _move(period, dir, callback) {\n    if (dir === 'previous') {\n      if (period === 'month') {\n        this.year = this.month > 0 ? this.year : --this.year;\n        this.month = this.month > 0 ? --this.month : 11;\n      } else if (period === 'year') {\n        this.year = --this.year;\n      }\n    } else if (dir === 'next') {\n      if (period === 'month') {\n        this.year = this.month < 11 ? this.year : ++this.year;\n        this.month = this.month < 11 ? ++this.month : 0;\n      } else if (period === 'year') {\n        this.year = ++this.year;\n      }\n    }\n    //this._generateTemplate(callback);\n  }\n  /************************* \n   ******PUBLIC METHODS *****\n   **************************/\n  getRealTime() {\n    var date1 = new Date();\n    var year = date1.getFullYear();\n    var month = date1.getMonth() + 1;\n    var date = date1.getDate();\n    return `${year}-${month}-${date}`;\n  }\n  getYear() {\n    return this.year;\n  }\n  getMonth() {\n    return this.month + 1;\n  }\n  getDate() {\n    return this.date;\n  }\n  getMonthStr() {\n    var month = this.getMonth();\n    return month > 0 && month < 10 ? '0' + month : month;\n  }\n  getDateStr() {\n    var date = this.getDate();\n    return date > 0 && date < 10 ? '0' + date : date;\n  }\n  getNextMonthStr() {\n    var month = this.getMonth() + 1;\n    month = month > 12 ? 0 : month;\n    return month > 0 && month < 10 ? '0' + month : month;\n  }\n  getPreMonthStr() {\n    var month = this.getMonth() - 1;\n    month = month < 1 ? 12 : month;\n    return month > 0 && month < 10 ? '0' + month : month;\n  }\n  getTimeByNextMonth() {\n    var month = this.getMonth() + 1;\n    var year = this.getYear();\n    year = (month > 12 ? year + 1 : year);\n    month = (month > 12 ? 1 : month);\n    month = (month > 0 && month < 10 ? '0' + month : month);\n    return `${year}-${month}`;\n  }\n  getTimeByPreMonth() {\n    var month = this.getMonth() - 1;\n    var year = this.getYear();\n    year = (month < 1 ? year - 1 : year);\n    month = (month < 1 ? 12 : month);\n    month = (month > 0 && month < 10 ? '0' + month : month);\n    return `${year}-${month}`;\n  }\n  getMonthName() {\n    return this.options.displayMonthAbbr ? this.options.monthabbrs[this.month] : this.options.months[this.month];\n  }\n  // gets the cell's content div associated to a day of the current displayed month\n  // day : 1 - [28||29||30||31]\n  getCell(day) {\n    var row = Math.floor((day + this.startingDay - this.options.startIn) / 7),\n      pos = day + this.startingDay - this.options.startIn - (row * 7) - 1;\n    return this.$cal.find('div.fc-body').children('div.fc-row').eq(row).children('div').eq(pos).children('div');\n  }\n  setData(caldata) {\n    this.caldata = caldata;\n  }\n  // goes to today's month/year\n  gotoNow(callback) {\n    this.month = this.today.getMonth();\n    this.year = this.today.getFullYear();\n    this._generateTemplate(callback);\n  }\n  // goes to month/year\n  goto(month, year, callback) {\n    this.month = month;\n    this.year = year;\n    this._generateTemplate(callback);\n  }\n  gotoPreviousMonth(callback, data) {\n    //this.setData(data);\n    this._move('month', 'previous', callback);\n  }\n  gotoPreviousYear(callback) {\n    this._move('year', 'previous', callback);\n  }\n  gotoNextMonth(callback, data) {\n    //this.setData(data);\n    this._move('month', 'next', callback);\n  }\n  gotoNextYear(callback) {\n    this._move('year', 'next', callback);\n  }\n}";
      return "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VisitCendar customTemplate \n// customTemplate.js \u662F\u53EF\u590D\u7528\u7684 React \u6A21\u677F\u7EC4\u4EF6\n// \u5728\u81EA\u5B9A\u4E49\u7EC4\u4EF6\u6A21\u677F\u4E2D\u8FDB\u884C\u8C03\u7528\n// \u8C03\u7528\u65B9\u5F0F\uFF1A\u5982\u7EC4\u4EF6\u540D\u79F0\u4E3ATest\uFF0Cvar Test = require('ysp-custom-components').Test;\n\n\n/*\n---------------------------\n\u5982\u4F55\u5F15\u7528\uFF1Aimport {VisitCalendar} from 'ysp-custom-components';\n---------------------------\n*/\nvar _class = function (_Component) {\n  _inherits(_class, _Component);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    var _this2 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this));\n    // the options\n\n\n    _this2.state = { checkedDay: null };\n    _this2.defaults = {\n      /*\n      you can also pass:\n      month : initialize calendar with this month (1-12). Default is today.\n      year : initialize calendar with this year. Default is today.\n      caldata : initial data/content for the calendar.\n      caldata format:\n      {\n        'MM-DD-YYYY' : 'HTML Content',\n        'MM-DD-YYYY' : 'HTML Content',\n        'MM-DD-YYYY' : 'HTML Content'\n        ...\n      }\n      */\n      weeks: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      weekabbrs: ['\u65E5', '\u4E00', '\u4E8C', '\u4E09', '\u56DB', '\u4E94', '\u516D'],\n      months: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n      monthabbrs: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n      // choose between values in options.weeks or options.weekabbrs\n      displayWeekAbbr: false,\n      // choose between values in options.months or options.monthabbrs\n      displayMonthAbbr: false,\n      // left most day in the calendar\n      // 0 - Sunday, 1 - Monday, ... , 6 - Saturday\n      startIn: 1\n    };\n    return _this2;\n  }\n\n  _createClass(_class, [{\n    key: 'fakeArray',\n    value: function fakeArray(length) {\n      if (typeof length !== 'number') {\n        console.error('fakeArray`s length type is not integer,this type is ' + (typeof length === 'undefined' ? 'undefined' : _typeof(length)));\n        return;\n      }\n      var array = new Array();\n      for (var i = 0; i < length; i++) {\n        array.push(i);\n      }\n      return array;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // options\n      var _this = this;\n      this.options = Object.assign({}, this.defaults, this.props.options);\n      this.options.displayWeekAbbr = true;\n      this.today = new Date();\n      var cmonth = void 0;\n      var cyear = void 0;\n      var cdate = void 0;\n      if (this.props.title && this.props.title.match(/\\d+/)) {\n        var title = this.props.title;\n        cmonth = parseInt(title.match(/\\D\\d+\\D/)[0].match(/\\d+/)[0]) - 1;\n        cyear = parseInt(title.match(/^\\d+\\D/)[0].match(/\\d+/)[0]);\n        // cdate = parseInt(title.match(/\\d+\\D$/m)[0].match(/\\d+/)[0]);\n      }\n      this.month = cmonth !== undefined ? cmonth : isNaN(this.options.month) || this.options.month == null ? this.today.getMonth() : this.options.month - 1;\n      this.year = cyear !== undefined ? cyear : isNaN(this.options.year) || this.options.year == null ? this.today.getFullYear() : this.options.year;\n      // this.date = cdate !== undefined ? cdate : (isNaN(this.options.date) || this.options.date == null) ? this.today.getDate() : this.options.date;\n      this.caldata = this.props.data;\n      return React.createElement(\n        'div',\n        null,\n        React.createElement(\n          'div',\n          { className: 'c-head' },\n          React.createElement(\n            'span',\n            { onClick: function onClick() {\n                _this.props.preMonth();\n                _this.gotoPreviousMonth();\n              } },\n            React.createElement('i', { className: 'ysp-visitcalendar-pre' })\n          ),\n          React.createElement(\n            'span',\n            { className: 'time' },\n            this.props.title\n          ),\n          React.createElement(\n            'span',\n            { onClick: function onClick() {\n                _this.props.nextMonth();\n                _this.gotoNextMonth();\n              } },\n            React.createElement('i', { className: 'ysp-visitcalendar-next' })\n          )\n        ),\n        this.generateTemplate()\n      );\n    }\n    // Calendar logic based on http://jszen.blogspot.pt/2007/03/how-to-build-simple-calendar-with.html\n\n  }, {\n    key: 'generateTemplate',\n    value: function generateTemplate(callback) {\n      var head = this.getHead(),\n          body = this.getBody(),\n          rowClass;\n      switch (this.rowTotal) {\n        case 4:\n          rowClass = 'fc-four-rows';\n          break;\n        case 5:\n          rowClass = 'fc-five-rows';\n          break;\n        case 6:\n          rowClass = 'fc-six-rows';\n          break;\n      }\n      return React.createElement(\n        'div',\n        { className: \"fc-calendar \" + rowClass },\n        head,\n        body\n      );\n    }\n  }, {\n    key: 'getHead',\n    value: function getHead() {\n      var _this3 = this;\n\n      return React.createElement(\n        'div',\n        { className: 'fc-head' },\n        this.fakeArray(7).map(function (item, index) {\n          var i = parseInt(index);\n          var pos = i + _this3.options.startIn,\n              j = pos > 6 ? pos - 6 - 1 : pos;\n          return React.createElement(\n            'div',\n            null,\n            _this3.options.displayWeekAbbr ? _this3.options.weekabbrs[j] : _this3.options.weeks[j]\n          );\n        })\n      );\n    }\n  }, {\n    key: 'getBody',\n    value: function getBody() {\n      var d = new Date(this.year, this.month + 1, 0),\n\n      // number of days in the month\n      monthLength = d.getDate(),\n          firstDay = new Date(this.year, this.month, 1);\n      // day of the week\n      this.startingDay = firstDay.getDay();\n      var day = 1;\n      var _this = this;\n      var breakIndex = void 0;\n      return React.createElement(\n        'div',\n        { className: 'fc-body' },\n        _this.fakeArray(7).map(function (item, index) {\n          var i = parseInt(index);\n          if (day > monthLength && !_this.rowTotal) {\n            _this.rowTotal = i + 1;\n            breakIndex = index;\n            return;\n          }\n          if (day > monthLength) {\n            return;\n          }\n          return React.createElement(\n            'div',\n            { className: 'fc-row' },\n            _this.fakeArray(7).map(function (item, subIndex) {\n              var j = parseInt(subIndex);\n              var pos = _this.startingDay - _this.options.startIn,\n                  p = pos < 0 ? 6 + pos + 1 : pos,\n                  inner = '',\n                  today = _this.month === _this.today.getMonth() && _this.year === _this.today.getFullYear() && day === _this.today.getDate(),\n                  content = '';\n              if (day <= monthLength && (i > 0 || j >= p)) {\n                // this day is:\n                var strdate = (_this.month + 1 < 10 ? '0' + (_this.month + 1) : _this.month + 1) + '-' + (day < 10 ? '0' + day : day) + '-' + _this.year,\n                    dayData = _this.caldata[strdate],\n                    currentDay = _this.year + '-' + (_this.month + 1 < 10 ? '0' + (_this.month + 1) : _this.month + 1) + '-' + (day < 10 ? '0' + day : day);\n                var isCurrentDay = function isCurrentDay(item) {\n                  return new Date(item.x_PLAN_DATE).getTime() == new Date(currentDay).getTime();\n                };\n                var filterItems = _this.caldata.filter(isCurrentDay);\n                var realTime = _this.getRealTime();\n                console.info(realTime);\n                inner = React.createElement(\n                  'span',\n                  _defineProperty({ className: 'calendar-cell', href: '#' }, 'className', new Date(realTime).getTime() > new Date(currentDay).getTime() ? 'z-done' : filterItems.length > 0 && filterItems[0].x_STATUS_CD == '\u5DF2\u63D0\u4EA4' ? 'z-done-new' : 'z-yet'),\n                  React.createElement(\n                    'span',\n                    { className: 'calendar-real-day' },\n                    day\n                  ),\n                  React.createElement(\n                    'span',\n                    null,\n                    filterItems.length > 0 ? filterItems[0].x_STATUS_CD : \"\"\n                  )\n                );\n                ++day;\n              } else {\n                today = false;\n              }\n              var cellClasses = today ? 'fc-today ' : '';\n              if (content !== '') {\n                cellClasses += 'fc-content';\n              }\n              return React.createElement(\n                'div',\n                { 'data-day-value': day,\n                  'data-index': subIndex,\n                  className: cellClasses + (_this.state.checkedDay == day ? 'calendar-day-checked' : ''),\n\n                  onClick: function onClick(e) {\n                    var currentTarget = e.currentTarget;\n                    var realDayEl = currentTarget.querySelector('span.calendar-real-day');\n                    var realDay = realDayEl && realDayEl.textContent;\n                    var idx = parseInt(currentTarget.dataset.index);\n                    _this.setState({ checkedDay: currentTarget.dataset.dayValue });\n                    var dateProp = {\n                      day: day,\n                      month: _this.month + 1,\n                      monthname: _this.options.displayMonthAbbr ? _this.options.monthabbrs[_this.month] : _this.options.months[_this.month],\n                      year: _this.year,\n                      weekday: idx + _this.options.startIn,\n                      weekdayname: _this.options.weeks[idx + _this.options.startIn],\n                      realDay: realDay\n                    };\n                    _this.props.onDayBack(dateProp);\n                  } },\n                inner\n              );\n            })\n          );\n        })\n      );\n    }\n  }, {\n    key: '_isValidDate',\n    value: function _isValidDate(date) {\n      date = date.replace(/-/gi, '');\n      var month = parseInt(date.substring(0, 2), 10),\n          day = parseInt(date.substring(2, 4), 10),\n          year = parseInt(date.substring(4, 8), 10);\n      if (month < 1 || month > 12) {\n        return false;\n      } else if (day < 1 || day > 31) {\n        return false;\n      } else if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30) {\n        return false;\n      } else if (month == 2 && (year % 400 == 0 || year % 4 == 0) && year % 100 != 0 && day > 29) {\n        return false;\n      } else if (month == 2 && year % 100 == 0 && day > 29) {\n        return false;\n      }\n      return {\n        day: day,\n        month: month,\n        year: year\n      };\n    }\n  }, {\n    key: '_move',\n    value: function _move(period, dir, callback) {\n      if (dir === 'previous') {\n        if (period === 'month') {\n          this.year = this.month > 0 ? this.year : --this.year;\n          this.month = this.month > 0 ? --this.month : 11;\n        } else if (period === 'year') {\n          this.year = --this.year;\n        }\n      } else if (dir === 'next') {\n        if (period === 'month') {\n          this.year = this.month < 11 ? this.year : ++this.year;\n          this.month = this.month < 11 ? ++this.month : 0;\n        } else if (period === 'year') {\n          this.year = ++this.year;\n        }\n      }\n      //this._generateTemplate(callback);\n    }\n    /************************* \n     ******PUBLIC METHODS *****\n     **************************/\n\n  }, {\n    key: 'getRealTime',\n    value: function getRealTime() {\n      var date1 = new Date();\n      var year = date1.getFullYear();\n      var month = date1.getMonth() + 1;\n      var date = date1.getDate();\n      return year + '-' + month + '-' + date;\n    }\n  }, {\n    key: 'getYear',\n    value: function getYear() {\n      return this.year;\n    }\n  }, {\n    key: 'getMonth',\n    value: function getMonth() {\n      return this.month + 1;\n    }\n  }, {\n    key: 'getDate',\n    value: function getDate() {\n      return this.date;\n    }\n  }, {\n    key: 'getMonthStr',\n    value: function getMonthStr() {\n      var month = this.getMonth();\n      return month > 0 && month < 10 ? '0' + month : month;\n    }\n  }, {\n    key: 'getDateStr',\n    value: function getDateStr() {\n      var date = this.getDate();\n      return date > 0 && date < 10 ? '0' + date : date;\n    }\n  }, {\n    key: 'getNextMonthStr',\n    value: function getNextMonthStr() {\n      var month = this.getMonth() + 1;\n      month = month > 12 ? 0 : month;\n      return month > 0 && month < 10 ? '0' + month : month;\n    }\n  }, {\n    key: 'getPreMonthStr',\n    value: function getPreMonthStr() {\n      var month = this.getMonth() - 1;\n      month = month < 1 ? 12 : month;\n      return month > 0 && month < 10 ? '0' + month : month;\n    }\n  }, {\n    key: 'getTimeByNextMonth',\n    value: function getTimeByNextMonth() {\n      var month = this.getMonth() + 1;\n      var year = this.getYear();\n      year = month > 12 ? year + 1 : year;\n      month = month > 12 ? 1 : month;\n      month = month > 0 && month < 10 ? '0' + month : month;\n      return year + '-' + month;\n    }\n  }, {\n    key: 'getTimeByPreMonth',\n    value: function getTimeByPreMonth() {\n      var month = this.getMonth() - 1;\n      var year = this.getYear();\n      year = month < 1 ? year - 1 : year;\n      month = month < 1 ? 12 : month;\n      month = month > 0 && month < 10 ? '0' + month : month;\n      return year + '-' + month;\n    }\n  }, {\n    key: 'getMonthName',\n    value: function getMonthName() {\n      return this.options.displayMonthAbbr ? this.options.monthabbrs[this.month] : this.options.months[this.month];\n    }\n    // gets the cell's content div associated to a day of the current displayed month\n    // day : 1 - [28||29||30||31]\n\n  }, {\n    key: 'getCell',\n    value: function getCell(day) {\n      var row = Math.floor((day + this.startingDay - this.options.startIn) / 7),\n          pos = day + this.startingDay - this.options.startIn - row * 7 - 1;\n      return this.$cal.find('div.fc-body').children('div.fc-row').eq(row).children('div').eq(pos).children('div');\n    }\n  }, {\n    key: 'setData',\n    value: function setData(caldata) {\n      this.caldata = caldata;\n    }\n    // goes to today's month/year\n\n  }, {\n    key: 'gotoNow',\n    value: function gotoNow(callback) {\n      this.month = this.today.getMonth();\n      this.year = this.today.getFullYear();\n      this._generateTemplate(callback);\n    }\n    // goes to month/year\n\n  }, {\n    key: 'goto',\n    value: function goto(month, year, callback) {\n      this.month = month;\n      this.year = year;\n      this._generateTemplate(callback);\n    }\n  }, {\n    key: 'gotoPreviousMonth',\n    value: function gotoPreviousMonth(callback, data) {\n      //this.setData(data);\n      this._move('month', 'previous', callback);\n    }\n  }, {\n    key: 'gotoPreviousYear',\n    value: function gotoPreviousYear(callback) {\n      this._move('year', 'previous', callback);\n    }\n  }, {\n    key: 'gotoNextMonth',\n    value: function gotoNextMonth(callback, data) {\n      //this.setData(data);\n      this._move('month', 'next', callback);\n    }\n  }, {\n    key: 'gotoNextYear',\n    value: function gotoNextYear(callback) {\n      this._move('year', 'next', callback);\n    }\n  }]);\n\n  return _class;\n}(_react.Component);\n\nexports.default = _class;";
    }
  });
})(window, ysp);